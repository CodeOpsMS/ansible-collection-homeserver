---
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  COLLECTION_NAMESPACE: ms
  COLLECTION_NAME: homeserver
  PYTHON_VERSION: "3.9"

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible-lint yamllint ansible-core

      - name: Run YAML Lint
        run: |
          yamllint .
        working-directory: ./ms/homeserver

      - name: Run Ansible Lint
        run: |
          ansible-lint .
        working-directory: ./ms/homeserver

  test:
    name: Test Collection
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        ansible-version: ['>=2.15.0', '>=2.16.0', '>=2.17.0']
        python-version: ['3.9', '3.10', '3.11', '3.12']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Ansible ${{ matrix.ansible-version }}
        run: |
          python -m pip install --upgrade pip
          pip install "ansible-core${{ matrix.ansible-version }}"
          pip install ansible-lint

      - name: Install collection dependencies
        run: |
          ansible-galaxy collection install ansible.posix community.general
        working-directory: ./ms/homeserver

      - name: Build collection
        run: |
          ansible-galaxy collection build --force
        working-directory: ./ms/homeserver

      - name: Install collection
        run: |
          ansible-galaxy collection install ./*.tar.gz --force
        working-directory: ./ms/homeserver

      - name: Run integration tests
        run: |
          ansible-playbook tests/integration.yml -v
        working-directory: ./ms/homeserver

  build:
    name: Build Collection
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core

      - name: Build collection
        run: |
          ansible-galaxy collection build --force
        working-directory: ./ms/homeserver

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: collection-artifact-${{ github.sha }}
          path: ./ms/homeserver/*.tar.gz
          retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './ms/homeserver'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  publish:
    name: Publish to Ansible Galaxy
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core

      - name: Build collection
        run: |
          ansible-galaxy collection build --force
        working-directory: ./ms/homeserver

      - name: Publish to Ansible Galaxy
        run: |
          ansible-galaxy collection publish *.tar.gz --api-key=${{ secrets.GALAXY_API_KEY }}
        working-directory: ./ms/homeserver

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: collection-artifact-${{ github.sha }}
          path: ./artifacts

      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          release_name: Release ${{ steps.version.outputs.VERSION }}
          body: |
            ## Changes in ${{ steps.version.outputs.VERSION }}
            
            See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
            
            ## Installation
            
            ```bash
            ansible-galaxy collection install ms.homeserver:${{ steps.version.outputs.VERSION }}
            ```
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/${{ env.COLLECTION_NAMESPACE }}-${{ env.COLLECTION_NAME }}-*.tar.gz
          asset_name: ${{ env.COLLECTION_NAMESPACE }}-${{ env.COLLECTION_NAME }}-${{ steps.version.outputs.VERSION }}.tar.gz
          asset_content_type: application/gzip
