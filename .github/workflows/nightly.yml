---
name: Nightly Tests

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.9"

jobs:
  comprehensive-test:
    name: Comprehensive Testing
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-20.04, ubuntu-22.04]
        ansible-version: ['>=2.15.0', '>=2.16.0', '>=2.17.0']
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to reduce job count
          - os: ubuntu-20.04
            python-version: '3.12'
          - os: ubuntu-22.04
            ansible-version: '>=2.15.0'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Ansible ${{ matrix.ansible-version }}
        run: |
          python -m pip install --upgrade pip
          pip install "ansible-core${{ matrix.ansible-version }}"
          pip install ansible-lint

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-apt

      - name: Install collection dependencies
        run: |
          ansible-galaxy collection install ansible.posix community.general
        working-directory: ./ms/homeserver

      - name: Run comprehensive tests
        run: |
          make all
        working-directory: ./ms/homeserver

      - name: Test collection installation
        run: |
          ansible-galaxy collection build --force
          ansible-galaxy collection install *.tar.gz --force
          ansible-doc ms.homeserver.info
        working-directory: ./ms/homeserver

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core time

      - name: Performance test
        run: |
          echo "Testing collection performance..."
          time ansible-playbook tests/integration.yml -v
        working-directory: ./ms/homeserver

  compatibility-test:
    name: Compatibility Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target_os:
          - ubuntu:20.04
          - ubuntu:22.04
          - debian:bullseye
          - debian:bookworm
          - rockylinux:8
          - rockylinux:9
          - alpine:3.18
          - alpine:3.19

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test on ${{ matrix.target_os }}
        run: |
          docker run --rm -v $(pwd):/workspace -w /workspace ${{ matrix.target_os }} \
            sh -c "
            if command -v apt-get >/dev/null; then
              apt-get update && apt-get install -y python3 python3-pip curl
            elif command -v yum >/dev/null; then
              yum update -y && yum install -y python3 python3-pip curl
            elif command -v apk >/dev/null; then
              apk update && apk add python3 py3-pip curl
            fi
            pip3 install ansible-core || python3 -m pip install ansible-core
            cd ms/homeserver
            ansible-galaxy collection install ansible.posix community.general
            ansible-playbook tests/integration.yml -v --connection=local --inventory=localhost,
            "

  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [comprehensive-test, performance-test, compatibility-test]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "Comprehensive Tests: ${{ needs.comprehensive-test.result }}"
          echo "Performance Tests: ${{ needs.performance-test.result }}"
          echo "Compatibility Tests: ${{ needs.compatibility-test.result }}"

      - name: Create issue on failure
        if: contains(needs.*.result, 'failure')
        uses: actions/github-script@v7
        with:
          script: |
            const title = `ðŸš¨ Nightly Tests Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `## Nightly Test Failure Report
            
            **Date:** ${new Date().toISOString()}
            **Workflow:** [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### Test Results:
            - **Comprehensive Tests:** ${{ needs.comprehensive-test.result }}
            - **Performance Tests:** ${{ needs.performance-test.result }}
            - **Compatibility Tests:** ${{ needs.compatibility-test.result }}
            
            Please investigate and fix the failing tests.
            
            ---
            *This issue was automatically created by the nightly test workflow.*`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'ci/cd', 'nightly-test-failure']
            });
