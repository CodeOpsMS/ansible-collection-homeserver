---
name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  COLLECTION_NAMESPACE: ms
  COLLECTION_NAME: homeserver
  PYTHON_VERSION: "3.9"

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$'; then
            echo "Error: Invalid version format. Expected: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi

      - name: Check if version exists in galaxy.yml
        run: |
          EXPECTED_VERSION="${{ steps.version.outputs.version }}"
          GALAXY_VERSION=$(grep "^version:" ms/homeserver/galaxy.yml | awk '{print $2}')
          if [ "$GALAXY_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "Error: galaxy.yml version ($GALAXY_VERSION) doesn't match release version ($EXPECTED_VERSION)"
            exit 1
          fi

  test-release:
    name: Test Release Build
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core ansible-lint

      - name: Run full test suite
        run: |
          make all
        working-directory: ./ms/homeserver

      - name: Build collection
        run: |
          ansible-galaxy collection build --force
        working-directory: ./ms/homeserver

      - name: Test installation
        run: |
          ansible-galaxy collection install *.tar.gz --force
          ansible-doc ms.homeserver.info
        working-directory: ./ms/homeserver

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, test-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core

      - name: Build collection
        run: |
          ansible-galaxy collection build --force
        working-directory: ./ms/homeserver

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Extract changelog section for this version
          if [ -f "ms/homeserver/CHANGELOG.md" ]; then
            CHANGELOG=$(awk '/^## \['$VERSION'\]/{flag=1; next} /^## \[/{flag=0} flag' ms/homeserver/CHANGELOG.md)
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG="See [CHANGELOG.md](ms/homeserver/CHANGELOG.md) for details."
            fi
          else
            CHANGELOG="No changelog available."
          fi
          
          # Save changelog to file (handle multiline)
          echo "$CHANGELOG" > /tmp/changelog.txt
          echo "changelog_file=/tmp/changelog.txt" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          release_name: Release v${{ needs.validate-release.outputs.version }}
          body_path: ${{ steps.changelog.outputs.changelog_file }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ms/homeserver/${{ env.COLLECTION_NAMESPACE }}-${{ env.COLLECTION_NAME }}-${{ needs.validate-release.outputs.version }}.tar.gz
          asset_name: ${{ env.COLLECTION_NAMESPACE }}-${{ env.COLLECTION_NAME }}-${{ needs.validate-release.outputs.version }}.tar.gz
          asset_content_type: application/gzip

  publish-galaxy:
    name: Publish to Ansible Galaxy
    runs-on: ubuntu-latest
    needs: [validate-release, test-release, create-release]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core

      - name: Build collection
        run: |
          ansible-galaxy collection build --force
        working-directory: ./ms/homeserver

      - name: Publish to Ansible Galaxy
        run: |
          ansible-galaxy collection publish *.tar.gz --api-key=${{ secrets.GALAXY_API_KEY }}
        working-directory: ./ms/homeserver

      - name: Verify publication
        run: |
          sleep 30  # Wait for Galaxy to process
          VERSION="${{ needs.validate-release.outputs.version }}"
          # Try to install the published version
          ansible-galaxy collection install ${{ env.COLLECTION_NAMESPACE }}.${{ env.COLLECTION_NAME }}:$VERSION --force

  notify-success:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs: [validate-release, publish-galaxy]
    if: success()
    steps:
      - name: Create success comment
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.validate-release.outputs.version }}';
            const body = `## 🎉 Release v${version} Published Successfully!
            
            ### 📦 Installation
            \`\`\`bash
            ansible-galaxy collection install ms.homeserver:${version}
            \`\`\`
            
            ### 🔗 Links
            - **GitHub Release:** [v${version}](${{ github.server_url }}/${{ github.repository }}/releases/tag/v${version})
            - **Ansible Galaxy:** [ms.homeserver](https://galaxy.ansible.com/ms/homeserver)
            - **Documentation:** [README.md](${{ github.server_url }}/${{ github.repository }}/blob/main/ms/homeserver/README.md)
            
            ### 📝 Changes
            See the [full changelog](${{ github.server_url }}/${{ github.repository }}/blob/main/ms/homeserver/CHANGELOG.md) for details.`;
            
            // Find the latest release and comment on it
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            
            if (releases.data.length > 0) {
              await github.rest.repos.createReleaseComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releases.data[0].id,
                body: body
              });
            }
